<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Index on temperancee&#39;s website</title>
    <link>/</link>
    <description>temperancee&#39;s website (Index)</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-gb</language>
    
      

      
    

    
    <lastBuildDate>Mon, 21 Jul 2025 21:50:13 +0100</lastBuildDate>
    
    <atom:link href="/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Hes the Boss</title>
      <link>/projects/hes_the_boss/</link>
      <pubDate>Sun, 17 Aug 2025 09:08:42 +0100</pubDate>
      
      <guid>/projects/hes_the_boss/</guid>
      <description>
&lt;a href=&#34;boss_nigger_(1975).mp4&#34; download&gt;BOSS&lt;/a&gt;
</description>
    </item>
    
    <item>
      <title>Robot Arm</title>
      <link>/projects/robot_arm/</link>
      <pubDate>Fri, 15 Aug 2025 09:08:42 +0100</pubDate>
      
      <guid>/projects/robot_arm/</guid>
      <description>&lt;p&gt;This page documents my work on building a robot arm. At a glance this project covers:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Designing the arm in FreeCAD and 3D printing it&lt;/li&gt;
&lt;li&gt;Using a Raspberry Pi Pico W to control the servo motors and communicate with the web server&lt;/li&gt;
&lt;li&gt;Creating the web interface to control the robot. Currently, you control angles - I am currently working on adding inverse kinematics and a camera for object detection and motion planning&lt;/li&gt;
&lt;li&gt;Using threading to make use of the Pico&amp;rsquo;s dual cores, and threading on the web server to allow for simultaneous commuication with the Pico and web interface&lt;/li&gt;
&lt;/ul&gt;
&lt;figure&gt;
            &lt;img src=&#34;http://localhost:1313/projects/robot_arm/robot1_hu_4074a1aeb63cbacd.jpg&#34; width=&#34;600&#34; height=&#34;661&#34; alt=&#34;A photo of the robot arm&#34;&gt;
            &lt;figcaption&gt;A photo of the robot arm&lt;/figcaption&gt;
        &lt;/figure&gt;

&lt;h2 id=&#34;&#34;&gt;The implementation details&lt;/h2&gt;
&lt;p&gt;This project can be split into four parts:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The CAD&lt;/li&gt;
&lt;li&gt;The electronics&lt;/li&gt;
&lt;li&gt;The Pico program&lt;/li&gt;
&lt;li&gt;The web interface&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;&#34;&gt;The CAD&lt;/h3&gt;
&lt;p&gt;The robot was designed using FreeCAD. I designed all the parts myself. While it certainly works, there are a lot of things I would have done differently if I were to start over:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Figuring out a better way to manage spreadsheets - I often have to reuse certain values like the measurements of the motors, which means these values get copied over to mutliple sheets&lt;/li&gt;
&lt;li&gt;Similarly, figuring out a more logical way to manage projects - when should I make a new file vs just a new body?&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;image-shortcode&#34;&gt;&lt;figure&gt;
            &lt;img src=&#34;http://localhost:1313/projects/robot_arm/cad_base_hu_8c4f0ebd755552ea.png&#34; width=&#34;400&#34; height=&#34;400&#34; alt=&#34;CAD model of the robot base&#34;&gt;
            &lt;figcaption&gt;CAD model of the robot base&lt;/figcaption&gt;
        &lt;/figure&gt;&lt;figure&gt;
            &lt;img src=&#34;http://localhost:1313/projects/robot_arm/cad_wrist_hu_e2bd08259e454329.png&#34; width=&#34;400&#34; height=&#34;400&#34; alt2=&#34;CAD model of the robot wrist&#34;&gt;
            &lt;figcaption&gt;CAD model of the robot wrist&lt;/figcaption&gt;
        &lt;/figure&gt;&lt;/div&gt;

&lt;h3 id=&#34;&#34;&gt;The electronics&lt;/h3&gt;
&lt;p&gt;The electronics in this project are so simple they&amp;rsquo;re not really worth mentioning - the servo motors are connected directly to PWM pins on a Raspberry Pi Pico W, and the whole project is powered by a 5V wall power supply. All the wiring lives on a breadboard.&lt;/p&gt;
&lt;h3 id=&#34;&#34;&gt;The Pico program&lt;/h3&gt;
&lt;p&gt;The Pico code is written in Micropython. Both cores on the Pico are utilised, courtesy of the &lt;a href=&#34;https://docs.micropython.org/en/latest/library/_thread.html&#34;&gt;_thread&lt;/a&gt; library. Servo control is handled by core0 and networking is handled by core1. Servo control is implemented as a callback that activates every time servo angles are sent from the webserver. Long polling is used: The Pico sends a HTTP GET request for angles to the server, and the server responds when they are updated. A better way to do this would to be use Websockets, but I don&amp;rsquo;t have experience with them, and chose to simplify the project for myself with long polling.&lt;/p&gt;
&lt;h3 id=&#34;&#34;&gt;The web interface&lt;/h3&gt;
&lt;p&gt;The front end of the web interface is an exceedingly basic HTML file, containing only 6 sliders (for angle and claw control) and a few buttons. Maybe I&amp;rsquo;ll add some CSS in the future.&lt;/p&gt;
&lt;p&gt;The HTTP server is written in Python, making use of the &lt;code&gt;ThreadingHTTPServer&lt;/code&gt; class from the &lt;a href=&#34;https://docs.python.org/3/library/http.server.html&#34;&gt;http.server&lt;/a&gt; library. As mentioned in the last section, long polling is used to send data to the Pico; when the server receives a GET request, it checks for updates to the &lt;code&gt;angles.json&lt;/code&gt; file using timestamps, and sends angles only when the JSON has been updated.&lt;/p&gt;
&lt;h2 id=&#34;&#34;&gt;The story&lt;/h2&gt;
&lt;p&gt;Back in September 2024, I began creating my own robot arm. I learnt a lot about CAD, Micropython, gears (although, there aren&amp;rsquo;t any in this robot, bar those within servos), and forward/inverse kinematics.
By the end of December, I had a &amp;ldquo;working&amp;rdquo; robot arm (I couldn&amp;rsquo;t get the inverese kinematics to work!). I didn&amp;rsquo;t really have a way to control it though, bar writing motor movements into the code, then editing and reuploading the code. At this point I put the arm aside to work on my quadcopter (&lt;strong&gt;post on that coming soon!!&lt;/strong&gt;).&lt;/p&gt;
&lt;p&gt;Recently I returned to finish off the project. I was losing interest in my quadcopter and had just seen the trailer for KBot by K-Scale Labs. My interest in robotics has always been tied to the idea of getting robots to do menial house chores for me, lol. Seeing how much development was going on in the area of humanoid robotics made me want to finish my arm project.
I have since created a web interface to control the robot, redesigned the wrist to use a bigger motor, and redesigned the claw to be able to pick up lego figures (a suitable test subject which I happen to have in abundance).&lt;/p&gt;
&lt;p&gt;The next step is to finish relearning forward/inverse kinematics. I have revised my knowledge of rotation matrices and homogenous transformations, and am slowly making my way through &lt;em&gt;Robot Modelling and Control&lt;/em&gt; by Spong, Hutchinson, and Vidyasagar. Following this, I plan to train an object detection model to identify lego figures, and combine the inverse kinematics and computer vision algorithms together, allowing the robot to pick up lego figures and move them around.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Micropython X Neovim</title>
      <link>/blog/micropython_x_neovim/</link>
      <pubDate>Tue, 08 Jul 2025 22:23:51 +0100</pubDate>
      
      <guid>/blog/micropython_x_neovim/</guid>
      <description>&lt;p&gt;This post teaches you how to get a barebones environment setup for working on Micropython projects with Neovim. This won&amp;rsquo;t cover setting up a proper Neovim environment, just how your can take an already well-developed environment and tailor it for Micropython development.&lt;/p&gt;
&lt;h2 id=&#34;&#34;&gt;Prerequistes&lt;/h2&gt;
&lt;p&gt;You should have:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;A Neovim setup, I recommend TJ DeVries&amp;rsquo; &amp;ldquo;&lt;a href=&#34;https://www.youtube.com/playlist?list=PLep05UYkc6wTyBe7kPjQFWVXTlhKeQejM&#34;&gt;Advent of Neovim&lt;/a&gt;&amp;rdquo; series for getting set up&lt;/li&gt;
&lt;li&gt;An understanding of LSPs in Neovim, again, see TJ DeVries&amp;rsquo; &lt;a href=&#34;https://youtu.be/bTWWFQZqzyI?si=ydv-dEtXykOh_cMh&#34;&gt;video&lt;/a&gt; on this&lt;/li&gt;
&lt;li&gt;An understanding of Python virtual environments, the &lt;a href=&#34;https://docs.python.org/3/library/venv.html&#34;&gt;docs&lt;/a&gt; are fairly accessible for this topic, or you can watch pretty much any YouTube video about venvs&lt;/li&gt;
&lt;li&gt;Basic familiarity with your shell (since this is a Neovim article, you probably know more than enough)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;&#34;&gt;Neovim LSP&lt;/h2&gt;
&lt;p&gt;There are many LSPs for Python, some of which you can read about by opening Neovim and running &lt;code&gt;:h lspconfig-all&lt;/code&gt;. I use Pyright, which works pretty well, and seems to be the most popular choice.&lt;/p&gt;
&lt;p&gt;If you use Mason, you can download it with that, or if you&amp;rsquo;re on Arch like me, a simple&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#c6d0f5;background-color:#303446;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;sudo pacman -S pyright
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;will suffice. For other operating systems, just use your standard package manager.&lt;/p&gt;
&lt;p&gt;You can also install Pyright via Pip if you&amp;rsquo;d like:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#c6d0f5;background-color:#303446;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;pip install pyright
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Now we need to enable Pyright in our &lt;code&gt;init.lua&lt;/code&gt;, or alternative, a separate Lua file that we &lt;code&gt;require&lt;/code&gt; in &lt;code&gt;init.lua&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#c6d0f5;background-color:#303446;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-lua&#34; data-lang=&#34;lua&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;vim.lsp.enable(&lt;span style=&#34;color:#a6d189&#34;&gt;&amp;#39;pyright&amp;#39;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Run &lt;code&gt;:h lspconfig-all&lt;/code&gt; and read the Pyright section for details on configuring the LSP - for most use cases, just enabling Pyright should suffice.&lt;/p&gt;
&lt;h3 id=&#34;&#34;&gt;Micropython import errors, and stubs to the rescue&lt;/h3&gt;
&lt;p&gt;Micropython is mostly identical to the standard CPython implementation, just with some extra libraries added for working with microcontrollers, e.g. &lt;code&gt;machine&lt;/code&gt;.
These libraries exist on the device running Micropython, and so code that imports them runs fine.
However, when importing these libraries, we get errors in our editor, because these libraries don&amp;rsquo;t exist on our PC/Laptop, so our editor cannot see them.&lt;/p&gt;
&lt;p&gt;This is where stubs come in. Stubs are essentially files that implement all the classes, methods, functions, etc. in a library, but they leave the implementation empty. This allows your LSP to provide information on available functions and their parameters without you having to check the docs. It also gets rid of the import errors, as your system will now be able to see and recognise the Micropython libraries.&lt;/p&gt;
&lt;p&gt;Thankfully, there exists &lt;a href=&#34;https://github.com/Josverl/micropython-stubs&#34;&gt;a large repository of stubs for various micropython compatible boards&lt;/a&gt;, so we don&amp;rsquo;t have to create these files ourselves. Getting these stubs to work involves first installing them, then configuring Pyright to see them.&lt;/p&gt;
&lt;h4 id=&#34;&#34;&gt;Installation&lt;/h4&gt;
&lt;p&gt;We install the stubs with Pip, so you may have to create a virtual environment to use them (due to global Pip installs being forbidden by default in externally managed (i.e., by a package manager) environments - see &lt;a href=&#34;https://packaging.python.org/en/latest/specifications/externally-managed-environments/#externally-managed-environments&#34;&gt;this document&lt;/a&gt; for details).&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#c6d0f5;background-color:#303446;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;python3 -m venv your-venv-name
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#99d1db&#34;&gt;source&lt;/span&gt; your-venv-name/bin/activate
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;These commands may differ depending on your operating system, see &lt;a href=&#34;https://docs.python.org/3/library/venv.html&#34;&gt;the docs&lt;/a&gt; for more details. Once the venv is created, we can either install the stubs directly, or create a &lt;code&gt;requirements-dev.txt&lt;/code&gt; file. We install the stubs to a folder called &lt;code&gt;typings&lt;/code&gt;.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;#requirements-dev.txt
micropython-rp2-rpi_pico_w-stubs==1.25.0.*
&lt;/code&gt;&lt;/pre&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#c6d0f5;background-color:#303446;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;pip install -r requirements-dev.txt --target typings
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;For more detail, see the &lt;a href=&#34;https://micropython-stubs.readthedocs.io/en/main/11_install_stubs.html&#34;&gt;stubs documentation&lt;/a&gt;.&lt;/p&gt;
&lt;h4 id=&#34;&#34;&gt;Configuring Pyright&lt;/h4&gt;
&lt;p&gt;Pyright is configured using either a &lt;code&gt;pyproject.toml&lt;/code&gt; or &lt;code&gt;pyrightconfig.json&lt;/code&gt; file. I use the toml file. There are various settings you can use to configure Pyright, documented &lt;a href=&#34;https://github.com/microsoft/pyright/blob/main/docs/configuration.md&#34;&gt;here&lt;/a&gt;. Here is my &lt;code&gt;pyproject.toml&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#c6d0f5;background-color:#303446;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-toml&#34; data-lang=&#34;toml&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;[tool.pyright]
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;stubPath = &lt;span style=&#34;color:#a6d189&#34;&gt;&amp;#34;typings&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;venvPath = &lt;span style=&#34;color:#a6d189&#34;&gt;&amp;#34;.&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;venv = &lt;span style=&#34;color:#a6d189&#34;&gt;&amp;#34;micropython_venv&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;typeshedPath = &lt;span style=&#34;color:#a6d189&#34;&gt;&amp;#34;typings&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;typeCheckingMode = &lt;span style=&#34;color:#a6d189&#34;&gt;&amp;#34;basic&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;reportMissingModuleSource = &lt;span style=&#34;color:#a6d189&#34;&gt;&amp;#34;none&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;Firstly, we set the &lt;code&gt;stubPath&lt;/code&gt;, which tells Pyright where our stubs are stored.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;venvPath&lt;/code&gt; specifies a path to a directory which &lt;em&gt;contains&lt;/em&gt; virtual environments. Since my venv is in the same directory as my &lt;code&gt;pyproject.toml&lt;/code&gt;, I set this to the current directory.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;venv&lt;/code&gt; is used in conjunction with &lt;code&gt;venvPath&lt;/code&gt; to specify which venv to use for this project.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;typeshedPath&lt;/code&gt; is used to override the standard library stubs with the micropython ones. We set it to &lt;code&gt;&amp;quot;typings&amp;quot;&lt;/code&gt;, which is where our stubs are stored&lt;/li&gt;
&lt;li&gt;&lt;code&gt;typeCheckingMode&lt;/code&gt; does what it says on the tin. &lt;code&gt;&amp;quot;basic&amp;quot;&lt;/code&gt; should work for most people.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;reportMissingModuleSource&lt;/code&gt; is a warning that appears when stubs are detected but their implementation files cannot be found. Since our implementation files are all stored on the device running MicroPython, we need to disable this warning.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;All paths are relative to the root of the project. The root of the project is determined based on the &lt;code&gt;root-markers&lt;/code&gt; option set in your LSP configuration of Pyright. By default, this is &lt;code&gt;{ &amp;quot;pyproject.toml&amp;quot;, &amp;quot;setup.py&amp;quot;, &amp;quot;setup.cfg&amp;quot;, &amp;quot;requirements.txt&amp;quot;, &amp;quot;Pipfile&amp;quot;, &amp;quot;pyrightconfig.json&amp;quot;, &amp;quot;.git&amp;quot; }&lt;/code&gt;. I personally have mine set to the following:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#c6d0f5;background-color:#303446;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-lua&#34; data-lang=&#34;lua&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;vim.lsp.config(&lt;span style=&#34;color:#a6d189&#34;&gt;&amp;#39;pyright&amp;#39;&lt;/span&gt;, {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    root&lt;span style=&#34;color:#99d1db;font-weight:bold&#34;&gt;-&lt;/span&gt;markers &lt;span style=&#34;color:#99d1db;font-weight:bold&#34;&gt;=&lt;/span&gt; { &lt;span style=&#34;color:#a6d189&#34;&gt;&amp;#34;pyproject.toml&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#a6d189&#34;&gt;&amp;#34;pyrightconfig.json&amp;#34;&lt;/span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;})
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;vim.lsp.enable(&lt;span style=&#34;color:#a6d189&#34;&gt;&amp;#39;pyright&amp;#39;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;For more details on these settings and more, see both the &lt;a href=&#34;https://micropython-stubs.readthedocs.io/en/main/22_vscode.html&#34;&gt;stub documentation&lt;/a&gt; and the &lt;a href=&#34;https://github.com/microsoft/pyright/blob/main/docs/configuration.md&#34;&gt;Pyright documentation&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;And that&amp;rsquo;s it! The LSP should now be up and running, and you should be able to see information about imported classes, methods, etc.&lt;/p&gt;
&lt;h2 id=&#34;&#34;&gt;Micropython without Thonny/VSCode&lt;/h2&gt;
&lt;p&gt;Almost every Micropython tutorial you will see will simply tell you to install Thonny to upload code - if you&amp;rsquo;re lucky, they might show you how to use VSCode (although I&amp;rsquo;ve only seen this for RP2040 based boards). If you search for long enough, however, you may be lucky enough to learn about &lt;code&gt;rshell&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;rshell&lt;/code&gt; is a command line utility that allows you to run commands on your board running Micropython. For full details, see its &lt;a href=&#34;https://github.com/dhylands/rshell&#34;&gt;github page&lt;/a&gt;. In this section, I&amp;rsquo;m just going to cover uploading and running files.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;rshell&lt;/code&gt; is installed through &lt;code&gt;pip&lt;/code&gt;, which means we&amp;rsquo;ll need our venv again.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#c6d0f5;background-color:#303446;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#99d1db&#34;&gt;source&lt;/span&gt; your-venv-name/bin/activate
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;pip install rshell
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;&#34;&gt;Uploading Code&lt;/h3&gt;
&lt;p&gt;Micropython only runs programs on start-up when you copy them onto the board and name them &lt;code&gt;main.py&lt;/code&gt;. To accomplish this, open a terminal, make sure &lt;code&gt;rshell&lt;/code&gt; is installed (and, if necessary, make sure your &lt;code&gt;venv&lt;/code&gt; is active), then run&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#c6d0f5;background-color:#303446;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;rshell -p /dev/ttyACM0
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;which will put you into &lt;code&gt;rshell&lt;/code&gt;. Your board&amp;rsquo;s serial port might differ from &lt;code&gt;/dev/ttyACM0&lt;/code&gt;, in which case, change it accordingly.&lt;/p&gt;
&lt;p&gt;From here, we need to copy over our program to the board. Files on the board are stored under &lt;code&gt;/pyboard/&lt;/code&gt;, and you can see files on your system with &lt;code&gt;ls&lt;/code&gt;, just like in a normal shell. Bringing this together:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#c6d0f5;background-color:#303446;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;cp my_program.py /pyboard/main.py
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;And just like that, your program is on your board! Reset your board and it&amp;rsquo;ll start running.&lt;/p&gt;
&lt;h3 id=&#34;&#34;&gt;Using the REPL for debugging&lt;/h3&gt;
&lt;p&gt;I am not particularly well versed in the art of debugging tools - I&amp;rsquo;m still at the stage where print statements here and there typically get the job done. As such, this section is pretty much just dedicated to allowing you to see the printed output of your programs.&lt;/p&gt;
&lt;p&gt;We once again make use of &lt;code&gt;rshell&lt;/code&gt;. The trick here is to give your program an explicit main function. In Python, that is done via&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#c6d0f5;background-color:#303446;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ca9ee6&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#8caaee&#34;&gt;main&lt;/span&gt;():
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#737994;font-style:italic&#34;&gt;# Your main function (doesn&amp;#39;t actually have to be called main)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ca9ee6&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#f2d5cf&#34;&gt;__name__&lt;/span&gt; &lt;span style=&#34;color:#99d1db;font-weight:bold&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#a6d189&#34;&gt;&amp;#39;__main__&amp;#39;&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    main()
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This little snippet makes it so that &lt;code&gt;main()&lt;/code&gt; is run when you run your program. The benefit of this is that if someone imports your code, their namespace is not polluted with all of your global variables (which you can instead put inside main(), although, you needn&amp;rsquo;t put all your globals in there). There may also be other benefits, but I couldn&amp;rsquo;t find the PEP that outlines why it&amp;rsquo;s good to do this&amp;hellip;&lt;/p&gt;
&lt;p&gt;Anyway, for our purposes, the reason we do this is that it allows us to copy our code to &lt;code&gt;/pyboard/main.py&lt;/code&gt;, open up the &lt;code&gt;rshell&lt;/code&gt; REPL, and do the following:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;&amp;gt;&amp;gt; from main import *
&amp;gt;&amp;gt; main()
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;which will run our main function, and thus, the whole python script, directing ouputs into the REPL for us to see!&lt;/p&gt;
&lt;p&gt;You can also use this to run individual functions in your program, and see their output, which can similarly be helpful for debugging.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>About</title>
      <link>/about/</link>
      <pubDate>Wed, 18 Jun 2025 19:46:13 +0100</pubDate>
      
      <guid>/about/</guid>
      <description>&lt;p&gt;My name is Myles, I&amp;rsquo;m a third year mathematics and statistics student at Durham University who spends his time building robots and programming things (e.g. robots, but not &lt;em&gt;just&lt;/em&gt; robots). I&amp;rsquo;m currently spending a year working as an Operational Researcher in the Civil Service, helping to develop a static microsimulation model.&lt;/p&gt;
&lt;p&gt;On this website you can expect to find documentation of my projects, as well as some more general blog posts relating to programming, robotics, maths, Vim, Linux, and whatever else.&lt;/p&gt;
&lt;p&gt;Enjoy your stay.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>The classic first blog post, a note on this website</title>
      <link>/blog/this_website/</link>
      <pubDate>Mon, 16 Jun 2025 20:38:56 +0100</pubDate>
      
      <guid>/blog/this_website/</guid>
      <description>&lt;p&gt;A little spiel on how and why I made this website.&lt;/p&gt;
&lt;h1 id=&#34;&#34;&gt;A website! How?&lt;/h1&gt;
&lt;p&gt;With ease.&lt;/p&gt;
&lt;p&gt;I&amp;rsquo;ve made a personal website before actually. I crafted it out of raw html and css, no frameworks, or whatever, just as Tim Berners-Lee intended.&lt;/p&gt;
&lt;p&gt;$$ \frac{2}{3} $$&lt;/p&gt;
&lt;p&gt;This time around I wanted things to&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Just be plain easier to code, so I actually &lt;em&gt;use&lt;/em&gt; the damn thing&lt;/li&gt;
&lt;li&gt;Feel a bit more&amp;hellip; put together&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;So I made this website using Hugo, the docs for which leave a &lt;em&gt;little&lt;/em&gt; to be desired in terms of a tutorial - it&amp;rsquo;s sort of like &amp;ldquo;so here&amp;rsquo;s how to install themes and make content - right! That&amp;rsquo;s all! Have fun wandering round the other doc pages slowly piecing everything else together!&amp;rdquo;. Whatever. I got it working easily enough.&lt;/p&gt;
&lt;p&gt;&lt;del&gt;Future me can pick this up, I might edit the CSS, which would certainly change the content of this article&lt;/del&gt;&lt;/p&gt;
&lt;h1 id=&#34;&#34;&gt;A website &amp;#x1f440;!? Why?&lt;/h1&gt;
&lt;p&gt;I needed a place to document my projects. I plan to make YouTube videos on them too, but videos are effort. Writing little posts is much easier (plus it acts as a sort of draft for the video script - two turds with one bone!).&lt;/p&gt;
&lt;p&gt;I also wanted a place to share some writings. Mini-essays of sorts. I realised I should write more - get the thoughts out there - &lt;em&gt;distill things&lt;/em&gt;. I&amp;rsquo;ve got a post coming up about teaching fractions, decimals, and division of them to children, motivated by my struggle trying to teach said topics to my little cousin.&lt;/p&gt;
&lt;p&gt;And finally, like the home page &lt;del&gt;says&lt;/del&gt; (will say):&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&amp;ldquo;I ask, &amp;lsquo;cause I&amp;rsquo;m not sure, do anybody make real shit anymore?&amp;rdquo; - K. West, &lt;em&gt;Stronger&lt;/em&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;Social media just ain&amp;rsquo;t got the &lt;strong&gt;vibe&lt;/strong&gt;. Same profile layout, same black background (because you&amp;rsquo;re not &lt;em&gt;seriously&lt;/em&gt; using Instagram in light mode are you?) - it&amp;rsquo;s a damn shame. That&amp;rsquo;s part of the reason I whacked this thing on &lt;a href=&#34;https://neocities.org/browse&#34;&gt;Neocities&lt;/a&gt; (also because it&amp;rsquo;s free): you see some real creativity from some real deranged people on there - &lt;em&gt;just as Tim Berners-Lee intended&lt;/em&gt;. Webpages should contain knowledge and vibes, not slop.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
