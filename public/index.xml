<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Index on temperancee&#39;s website</title>
    <link>/</link>
    <description>temperancee&#39;s website (Index)</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-gb</language>
    
      

      
    

    
    <lastBuildDate>Mon, 21 Jul 2025 21:50:13 +0100</lastBuildDate>
    
    <atom:link href="/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Robot Arm</title>
      <link>/projects/robot_arm/</link>
      <pubDate>Fri, 15 Aug 2025 09:08:42 +0100</pubDate>
      
      <guid>/projects/robot_arm/</guid>
      <description>&lt;p&gt;This page documents my work on building a robot arm. At a glance this project covers:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Deriving the inverse kinematics equaitons for a 5DOF robot arm, and implementing them in simulation and on hardware, handling various edge cases and hardware limitations&lt;/li&gt;
&lt;li&gt;Writing a simulator in matplotlib for not only the 5DOF arm but also a 6DOF arm&lt;/li&gt;
&lt;li&gt;Designing the arm in FreeCAD and 3D printing it&lt;/li&gt;
&lt;li&gt;Using a Raspberry Pi Pico W to control the servo motors and communicate with the web server&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Repositories: Robot Arm, &lt;a href=&#34;https://github.com/temperancee/robot_arm_kinematics_simulation&#34;&gt;Simulation&lt;/a&gt;&lt;/p&gt;
&lt;div class=&#34;pair-figure-shortcode&#34;&gt;
        &lt;figure&gt;
            &lt;video width=&#34;500&#34; height=&#34;600&#34;
                    muted
                    loop
                    autoplay
                controls&gt;
                &lt;source src=&#34;wrist_robot_arm.mp4&#34; type=&#34;video/mp4&#34;&gt; There is a video here, but your browser does not support the video tag.
            &lt;/video&gt;&lt;figcaption&gt;The robot can reach the same point from multiple orientations&lt;/figcaption&gt;
        &lt;/figure&gt;
        &lt;figure&gt;
            &lt;video width=&#34;500&#34; height=&#34;600&#34;
                    muted
                    loop
                    autoplay
                controls&gt;
                &lt;source src=&#34;square_robot_arm.mp4&#34; type=&#34;video/mp4&#34;&gt;
            There is a video here, but your browser does not support the video tag.
            &lt;/video&gt;&lt;figcaption&gt;The robot maps out a square using inverse kinematics&lt;/figcaption&gt;
        &lt;/figure&gt;
&lt;/div&gt;

&lt;p&gt;This project can be split into seven parts:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The kinematics&lt;/li&gt;
&lt;li&gt;The simulation&lt;/li&gt;
&lt;li&gt;The CAD&lt;/li&gt;
&lt;li&gt;The electronics&lt;/li&gt;
&lt;li&gt;The Pico program&lt;/li&gt;
&lt;li&gt;The server program&lt;/li&gt;
&lt;li&gt;The web interface&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;&#34;&gt;Some terminology&lt;/h2&gt;
&lt;p&gt;I refer to &amp;rsquo;links&amp;rsquo; and &amp;lsquo;joints&amp;rsquo; throughout this article - joints are the servo motors (i.e., the things that make the parts of the arm rotate (although, more generally, joints do not have to be rotational)), and links are the things that hold the joints together.&lt;/p&gt;
&lt;h2 id=&#34;&#34;&gt;The kinematics&lt;/h2&gt;
&lt;p&gt;I learnt forward and inverse kinematics by reading chapters 2, 3, and 5 of Robot Modelling and Control by Spong, Hutchinson, and Vidyasagar. It&amp;rsquo;s a pretty good book, but doesn&amp;rsquo;t give away all the answers. The book focuses on the case of a 6DOF robot arm with a spherical wrist, which is one of the robots I added to my simulation, but the 5DOF case is slightly different. My 5DOF robot does not have the first joint in the spherical wrist, which essentially means the wrist cannot yaw independently of the base of the robot. This limits the orientations of the end-effector, but not their positions, and for many tasks, this is fine. It meant that I had to calculate the yaw as a function of the base angle, and then use the 6DOF solution. Various other edge cases and limitations, such as the fact that my robot&amp;rsquo;s motors only rotate between 0 and 180 degrees, rather than a full 360, had to be accounted for in the code.&lt;/p&gt;
&lt;h2 id=&#34;&#34;&gt;The simulation&lt;/h2&gt;
&lt;p&gt;The simulation program uses matplotlib to plot lines representing the links of the robot arm, as well as the coordinate frames of each joint. This was my first time writing a non-trivial object-oriented program, and I learnt lots about classes in Python and structuring code in general. It makes use of the &lt;a href=&#34;https://en.wikipedia.org/wiki/Model%E2%80%93view%E2%80%93controller&#34;&gt;model-view-controller&lt;/a&gt; pattern, which keeps the code nice and organised.&lt;/p&gt;
&lt;h2 id=&#34;&#34;&gt;The CAD&lt;/h2&gt;
&lt;p&gt;The robot was designed using FreeCAD. I designed all the parts myself. While the robot works, there are a lot of things I would have done differently if I were to start over:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Figuring out a better way to manage spreadsheets - I often have to reuse certain values like the measurements of the motors, which means these values get copied over to mutliple sheets&lt;/li&gt;
&lt;li&gt;More importantly, the robot is very unstable. This was my first CAD design where knowledge of mechanical design techniques (which I possess very little of) played an important role. If I was to start over, I would like to buy some better motors, ideally ones where you can connect both sides of the motor to a joint. Since I wanted this first project to be cheap, this was sort of a necessary drawback.&lt;/li&gt;
&lt;li&gt;The shoulder joint was designed to just slot into the base, this means there is a lot of wiggle, so the positions taken by the model are often off by a couple of millimetres.&lt;/li&gt;
&lt;li&gt;The claw placement currently does not follow the Denavitt-Hartenberg convention. This was not a problem, until I implemented inverse kinematics. What it means in practice is that the claw position is always slightly off from the desired position. For this reason, there aren&amp;rsquo;t any videos of the robot actually picking anything up in this article.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;pair-figure-shortcode&#34;&gt;&lt;figure&gt;
            &lt;img src=&#34;http://localhost:1313/projects/robot_arm/robot_arm_cad_model_hu_376a5dc76479bc70.png&#34; width=&#34;400&#34; height=&#34;400&#34; alt=&#34;CAD model of the robot arm&#34;&gt;
            &lt;figcaption&gt;CAD model of the robot arm&lt;/figcaption&gt;
        &lt;/figure&gt;&lt;figure&gt;
            &lt;img src=&#34;http://localhost:1313/projects/robot_arm/robot_arm_cad_model_alt_pos_hu_2e8fb6b295fcb0a.png&#34; width=&#34;400&#34; height=&#34;400&#34; alt2=&#34;CAD model of the robot in a different position&#34;&gt;
            &lt;figcaption&gt;CAD model of the robot in a different position&lt;/figcaption&gt;
        &lt;/figure&gt;&lt;/div&gt;

&lt;h2 id=&#34;&#34;&gt;The electronics&lt;/h2&gt;
&lt;p&gt;The electronics in this project are very simple. The robot is controlled by a Raspberry Pi Pico W which connects to a PCA9685 servo driver board via I2C. The four MG99R servos and the one MG90s servo motor are connected to and controlled by this servo driver. The Pico receives joint angles from my PC via USB, then sends the angles to the servo driver, which then moves the servos. All the wiring lives on a breadboard.&lt;/p&gt;
&lt;h2 id=&#34;&#34;&gt;The Pico program&lt;/h2&gt;
&lt;p&gt;The Pico code is written in Micropython. Originally, both cores on the Pico were utilised, courtesy of the &lt;a href=&#34;https://docs.micropython.org/en/latest/library/_thread.html&#34;&gt;_thread&lt;/a&gt; library. Servo control was handled by core0 and networking (for communication with the server (my PC)) was handled by core1. Servo control was implemented as a callback that activated every time servo angles were sent from the server. Long polling was used: The Pico sent a HTTP GET request for angles to the server, and the server responds when they are updated. Unfortunately, this wasn&amp;rsquo;t the most reliable form of commuication, and it included lots of overhead. I wanted to simplify the process using Websockets rather than long polling, but couldn&amp;rsquo;t find any decent libraries that allowed to Pico to use Websockets while acting as a client, and my networking knowledge is limited to the point where I didn&amp;rsquo;t want to write my own.&lt;/p&gt;
&lt;p&gt;My solution came in the form of an even further simplification. Since my robot and server are always next to each other anyway, I simply chose to send servo angles from my PC to the Pico over USB, using &lt;a href=&#34;https://pythonhosted.org/pyserial/&#34;&gt;pyserial&lt;/a&gt;. This made the code on the Pico much simpler, and threading was no longer needed. Now the Pico simply waits for data to be received, then moves the servos accordingly via &lt;a href=&#34;https://github.com/kevinmcaleer/pca9685_for_pico&#34;&gt;Kevin McAleer&amp;rsquo;s micropython PCA9685 library&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&#34;&#34;&gt;The server&lt;/h2&gt;
&lt;p&gt;Originally, the server used the &lt;code&gt;ThreadingHTTPServer&lt;/code&gt; class from the &lt;a href=&#34;https://docs.python.org/3/library/http.server.html&#34;&gt;http.server&lt;/a&gt; library for commuication with both the web interface and the Pico. As mentioned in the last section, the Pico now receives data via USB, and with this change I also moved to using the &lt;a href=&#34;https://microdot.readthedocs.io/en/latest/&#34;&gt;Microdot&lt;/a&gt; library for communication with the web interface. This makes the code a lot more readable by hiding away all the HTTP boilerplate.&lt;/p&gt;
&lt;p&gt;The server receives data from the web server: either angles or pose. Angles are immediately sent to the Pico, whereas pose data is first passed to the inverse kinematics method of the robot arm object, different arm configurations (e.g., elbow up vs elbow down) are checked for validity, and the resulting angles are sent over to the Pico, which then moves the servos.&lt;/p&gt;
&lt;h2 id=&#34;&#34;&gt;The web interface&lt;/h2&gt;
&lt;p&gt;The front end of the web interface is an exceedingly basic HTML file, containing only 6 sliders (for angle and claw control), some text boxes to specify position and orientation and a few buttons to submit data. Maybe I&amp;rsquo;ll add some CSS in the future.&lt;/p&gt;
&lt;h2 id=&#34;&#34;&gt;Next steps&lt;/h2&gt;
&lt;p&gt;As I mentioned in the CAD section, this robot, while functional, leaves a lot of room for improvement. This is of no surprise, since this was my first time building a robot, and I was bound to make mistakes. Nevertheless, I am due an upgrade. Over the course of this project, I most enjoyed working on the mathematics and programming side of things, as opposed to the CAD design and electronics. With that in mind, I have decided to build a &lt;a href=&#34;https://huggingface.co/docs/lerobot/so101&#34;&gt;LeRobot SO-101&lt;/a&gt; arm for the next stage of this project (and some future projects using reinforcement learning hopefully).&lt;/p&gt;
&lt;p&gt;The next stage is the addition of a camera to the workspace, which will run an object detection algorithm written in PyTorch - I&amp;rsquo;m currently learning about convolutional neural networks. I can then use my knowledge of rigid motions (learnt from Robot Modelling and Control) to determine the position of the objects detected in the camera frame to get their coordinates in the base frame, and move the robot accordingly.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Micropython X Neovim</title>
      <link>/blog/micropython_x_neovim/</link>
      <pubDate>Tue, 08 Jul 2025 22:23:51 +0100</pubDate>
      
      <guid>/blog/micropython_x_neovim/</guid>
      <description>&lt;p&gt;This post teaches you how to get a barebones environment setup for working on Micropython projects with Neovim. This won&amp;rsquo;t cover setting up a proper Neovim environment, just how your can take an already well-developed environment and tailor it for Micropython development.&lt;/p&gt;
&lt;h2 id=&#34;&#34;&gt;Prerequistes&lt;/h2&gt;
&lt;p&gt;You should have:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;A Neovim setup, I recommend TJ DeVries&amp;rsquo; &amp;ldquo;&lt;a href=&#34;https://www.youtube.com/playlist?list=PLep05UYkc6wTyBe7kPjQFWVXTlhKeQejM&#34;&gt;Advent of Neovim&lt;/a&gt;&amp;rdquo; series for getting set up&lt;/li&gt;
&lt;li&gt;An understanding of LSPs in Neovim, again, see TJ DeVries&amp;rsquo; &lt;a href=&#34;https://youtu.be/bTWWFQZqzyI?si=ydv-dEtXykOh_cMh&#34;&gt;video&lt;/a&gt; on this&lt;/li&gt;
&lt;li&gt;An understanding of Python virtual environments, the &lt;a href=&#34;https://docs.python.org/3/library/venv.html&#34;&gt;docs&lt;/a&gt; are fairly accessible for this topic, or you can watch pretty much any YouTube video about venvs&lt;/li&gt;
&lt;li&gt;Basic familiarity with your shell (since this is a Neovim article, you probably know more than enough)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;&#34;&gt;Neovim LSP&lt;/h2&gt;
&lt;p&gt;There are many LSPs for Python, some of which you can read about by opening Neovim and running &lt;code&gt;:h lspconfig-all&lt;/code&gt;. I use Pyright, which works pretty well, and seems to be the most popular choice.&lt;/p&gt;
&lt;p&gt;If you use Mason, you can download it with that, or if you&amp;rsquo;re on Arch like me, a simple&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#c6d0f5;background-color:#303446;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;sudo pacman -S pyright
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;will suffice. For other operating systems, just use your standard package manager.&lt;/p&gt;
&lt;p&gt;You can also install Pyright via Pip if you&amp;rsquo;d like:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#c6d0f5;background-color:#303446;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;pip install pyright
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Now we need to enable Pyright in our &lt;code&gt;init.lua&lt;/code&gt;, or alternative, a separate Lua file that we &lt;code&gt;require&lt;/code&gt; in &lt;code&gt;init.lua&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#c6d0f5;background-color:#303446;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-lua&#34; data-lang=&#34;lua&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;vim.lsp.enable(&lt;span style=&#34;color:#a6d189&#34;&gt;&amp;#39;pyright&amp;#39;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Run &lt;code&gt;:h lspconfig-all&lt;/code&gt; and read the Pyright section for details on configuring the LSP - for most use cases, just enabling Pyright should suffice.&lt;/p&gt;
&lt;h3 id=&#34;&#34;&gt;Micropython import errors, and stubs to the rescue&lt;/h3&gt;
&lt;p&gt;Micropython is mostly identical to the standard CPython implementation, just with some extra libraries added for working with microcontrollers, e.g. &lt;code&gt;machine&lt;/code&gt;.
These libraries exist on the device running Micropython, and so code that imports them runs fine.
However, when importing these libraries, we get errors in our editor, because these libraries don&amp;rsquo;t exist on our PC/Laptop, so our editor cannot see them.&lt;/p&gt;
&lt;p&gt;This is where stubs come in. Stubs are essentially files that implement all the classes, methods, functions, etc. in a library, but they leave the implementation empty. This allows your LSP to provide information on available functions and their parameters without you having to check the docs. It also gets rid of the import errors, as your system will now be able to see and recognise the Micropython libraries.&lt;/p&gt;
&lt;p&gt;Thankfully, there exists &lt;a href=&#34;https://github.com/Josverl/micropython-stubs&#34;&gt;a large repository of stubs for various micropython compatible boards&lt;/a&gt;, so we don&amp;rsquo;t have to create these files ourselves. Getting these stubs to work involves first installing them, then configuring Pyright to see them.&lt;/p&gt;
&lt;h4 id=&#34;&#34;&gt;Installation&lt;/h4&gt;
&lt;p&gt;We install the stubs with Pip, so you may have to create a virtual environment to use them (due to global Pip installs being forbidden by default in externally managed (i.e., by a package manager) environments - see &lt;a href=&#34;https://packaging.python.org/en/latest/specifications/externally-managed-environments/#externally-managed-environments&#34;&gt;this document&lt;/a&gt; for details).&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#c6d0f5;background-color:#303446;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;python3 -m venv your-venv-name
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#99d1db&#34;&gt;source&lt;/span&gt; your-venv-name/bin/activate
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;These commands may differ depending on your operating system, see &lt;a href=&#34;https://docs.python.org/3/library/venv.html&#34;&gt;the docs&lt;/a&gt; for more details. Once the venv is created, we can either install the stubs directly, or create a &lt;code&gt;requirements-dev.txt&lt;/code&gt; file. We install the stubs to a folder called &lt;code&gt;typings&lt;/code&gt;.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;#requirements-dev.txt
micropython-rp2-rpi_pico_w-stubs==1.25.0.*
&lt;/code&gt;&lt;/pre&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#c6d0f5;background-color:#303446;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;pip install -r requirements-dev.txt --target typings
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;For more detail, see the &lt;a href=&#34;https://micropython-stubs.readthedocs.io/en/main/11_install_stubs.html&#34;&gt;stubs documentation&lt;/a&gt;.&lt;/p&gt;
&lt;h4 id=&#34;&#34;&gt;Configuring Pyright&lt;/h4&gt;
&lt;p&gt;Pyright is configured using either a &lt;code&gt;pyproject.toml&lt;/code&gt; or &lt;code&gt;pyrightconfig.json&lt;/code&gt; file. I use the toml file. There are various settings you can use to configure Pyright, documented &lt;a href=&#34;https://github.com/microsoft/pyright/blob/main/docs/configuration.md&#34;&gt;here&lt;/a&gt;. Here is my &lt;code&gt;pyproject.toml&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#c6d0f5;background-color:#303446;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-toml&#34; data-lang=&#34;toml&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;[tool.pyright]
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;stubPath = &lt;span style=&#34;color:#a6d189&#34;&gt;&amp;#34;typings&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;venvPath = &lt;span style=&#34;color:#a6d189&#34;&gt;&amp;#34;.&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;venv = &lt;span style=&#34;color:#a6d189&#34;&gt;&amp;#34;micropython_venv&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;typeshedPath = &lt;span style=&#34;color:#a6d189&#34;&gt;&amp;#34;typings&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;typeCheckingMode = &lt;span style=&#34;color:#a6d189&#34;&gt;&amp;#34;basic&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;reportMissingModuleSource = &lt;span style=&#34;color:#a6d189&#34;&gt;&amp;#34;none&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;Firstly, we set the &lt;code&gt;stubPath&lt;/code&gt;, which tells Pyright where our stubs are stored.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;venvPath&lt;/code&gt; specifies a path to a directory which &lt;em&gt;contains&lt;/em&gt; virtual environments. Since my venv is in the same directory as my &lt;code&gt;pyproject.toml&lt;/code&gt;, I set this to the current directory.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;venv&lt;/code&gt; is used in conjunction with &lt;code&gt;venvPath&lt;/code&gt; to specify which venv to use for this project.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;typeshedPath&lt;/code&gt; is used to override the standard library stubs with the micropython ones. We set it to &lt;code&gt;&amp;quot;typings&amp;quot;&lt;/code&gt;, which is where our stubs are stored&lt;/li&gt;
&lt;li&gt;&lt;code&gt;typeCheckingMode&lt;/code&gt; does what it says on the tin. &lt;code&gt;&amp;quot;basic&amp;quot;&lt;/code&gt; should work for most people.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;reportMissingModuleSource&lt;/code&gt; is a warning that appears when stubs are detected but their implementation files cannot be found. Since our implementation files are all stored on the device running MicroPython, we need to disable this warning.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;All paths are relative to the root of the project. The root of the project is determined based on the &lt;code&gt;root-markers&lt;/code&gt; option set in your LSP configuration of Pyright. By default, this is &lt;code&gt;{ &amp;quot;pyproject.toml&amp;quot;, &amp;quot;setup.py&amp;quot;, &amp;quot;setup.cfg&amp;quot;, &amp;quot;requirements.txt&amp;quot;, &amp;quot;Pipfile&amp;quot;, &amp;quot;pyrightconfig.json&amp;quot;, &amp;quot;.git&amp;quot; }&lt;/code&gt;. I personally have mine set to the following:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#c6d0f5;background-color:#303446;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-lua&#34; data-lang=&#34;lua&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;vim.lsp.config(&lt;span style=&#34;color:#a6d189&#34;&gt;&amp;#39;pyright&amp;#39;&lt;/span&gt;, {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    root&lt;span style=&#34;color:#99d1db;font-weight:bold&#34;&gt;-&lt;/span&gt;markers &lt;span style=&#34;color:#99d1db;font-weight:bold&#34;&gt;=&lt;/span&gt; { &lt;span style=&#34;color:#a6d189&#34;&gt;&amp;#34;pyproject.toml&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#a6d189&#34;&gt;&amp;#34;pyrightconfig.json&amp;#34;&lt;/span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;})
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;vim.lsp.enable(&lt;span style=&#34;color:#a6d189&#34;&gt;&amp;#39;pyright&amp;#39;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;For more details on these settings and more, see both the &lt;a href=&#34;https://micropython-stubs.readthedocs.io/en/main/22_vscode.html&#34;&gt;stub documentation&lt;/a&gt; and the &lt;a href=&#34;https://github.com/microsoft/pyright/blob/main/docs/configuration.md&#34;&gt;Pyright documentation&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;And that&amp;rsquo;s it! The LSP should now be up and running, and you should be able to see information about imported classes, methods, etc.&lt;/p&gt;
&lt;h2 id=&#34;&#34;&gt;Micropython without Thonny/VSCode&lt;/h2&gt;
&lt;p&gt;Almost every Micropython tutorial you will see will simply tell you to install Thonny to upload code - if you&amp;rsquo;re lucky, they might show you how to use VSCode (although I&amp;rsquo;ve only seen this for RP2040 based boards). If you search for long enough, however, you may be lucky enough to learn about &lt;code&gt;rshell&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;rshell&lt;/code&gt; is a command line utility that allows you to run commands on your board running Micropython. For full details, see its &lt;a href=&#34;https://github.com/dhylands/rshell&#34;&gt;github page&lt;/a&gt;. In this section, I&amp;rsquo;m just going to cover uploading and running files.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;rshell&lt;/code&gt; is installed through &lt;code&gt;pip&lt;/code&gt;, which means we&amp;rsquo;ll need our venv again.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#c6d0f5;background-color:#303446;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#99d1db&#34;&gt;source&lt;/span&gt; your-venv-name/bin/activate
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;pip install rshell
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;&#34;&gt;Uploading Code&lt;/h3&gt;
&lt;p&gt;Micropython only runs programs on start-up when you copy them onto the board and name them &lt;code&gt;main.py&lt;/code&gt;. To accomplish this, open a terminal, make sure &lt;code&gt;rshell&lt;/code&gt; is installed (and, if necessary, make sure your &lt;code&gt;venv&lt;/code&gt; is active), then run&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#c6d0f5;background-color:#303446;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;rshell -p /dev/ttyACM0
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;which will put you into &lt;code&gt;rshell&lt;/code&gt;. Your board&amp;rsquo;s serial port might differ from &lt;code&gt;/dev/ttyACM0&lt;/code&gt;, in which case, change it accordingly.&lt;/p&gt;
&lt;p&gt;From here, we need to copy over our program to the board. Files on the board are stored under &lt;code&gt;/pyboard/&lt;/code&gt;, and you can see files on your system with &lt;code&gt;ls&lt;/code&gt;, just like in a normal shell. Bringing this together:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#c6d0f5;background-color:#303446;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;cp my_program.py /pyboard/main.py
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;And just like that, your program is on your board! Reset your board and it&amp;rsquo;ll start running.&lt;/p&gt;
&lt;h3 id=&#34;&#34;&gt;Using the REPL for debugging&lt;/h3&gt;
&lt;p&gt;I am not particularly well versed in the art of debugging tools - I&amp;rsquo;m still at the stage where print statements here and there typically get the job done. As such, this section is pretty much just dedicated to allowing you to see the printed output of your programs.&lt;/p&gt;
&lt;p&gt;We once again make use of &lt;code&gt;rshell&lt;/code&gt;. The trick here is to give your program an explicit main function. In Python, that is done via&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#c6d0f5;background-color:#303446;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ca9ee6&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#8caaee&#34;&gt;main&lt;/span&gt;():
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#737994;font-style:italic&#34;&gt;# Your main function (doesn&amp;#39;t actually have to be called main)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ca9ee6&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#f2d5cf&#34;&gt;__name__&lt;/span&gt; &lt;span style=&#34;color:#99d1db;font-weight:bold&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#a6d189&#34;&gt;&amp;#39;__main__&amp;#39;&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    main()
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This little snippet makes it so that &lt;code&gt;main()&lt;/code&gt; is run when you run your program. The benefit of this is that if someone imports your code, their namespace is not polluted with all of your global variables (which you can instead put inside main(), although, you needn&amp;rsquo;t put all your globals in there). There may also be other benefits, but I couldn&amp;rsquo;t find the PEP that outlines why it&amp;rsquo;s good to do this&amp;hellip;&lt;/p&gt;
&lt;p&gt;Anyway, for our purposes, the reason we do this is that it allows us to copy our code to &lt;code&gt;/pyboard/main.py&lt;/code&gt;, open up the &lt;code&gt;rshell&lt;/code&gt; REPL, and do the following:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;&amp;gt;&amp;gt; from main import *
&amp;gt;&amp;gt; main()
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;which will run our main function, and thus, the whole python script, directing ouputs into the REPL for us to see!&lt;/p&gt;
&lt;p&gt;You can also use this to run individual functions in your program, and see their output, which can similarly be helpful for debugging.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>About</title>
      <link>/about/</link>
      <pubDate>Wed, 18 Jun 2025 19:46:13 +0100</pubDate>
      
      <guid>/about/</guid>
      <description>&lt;p&gt;My name is Myles, I&amp;rsquo;m a fourth year mathematics and statistics student at Durham University with a strong interest in robotics and specifically computer vision applications in robotics. Last year I worked as an Operational Researcher in the Civil Service, helping to develop a static microsimulation model.&lt;/p&gt;
&lt;p&gt;On this website you can expect to find documentation of my projects, as well as some more general blog posts relating to programming, robotics, maths, and Linux, amongst other things.&lt;/p&gt;
&lt;p&gt;Enjoy your stay.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>The classic first blog post, a note on this website</title>
      <link>/blog/this_website/</link>
      <pubDate>Mon, 16 Jun 2025 20:38:56 +0100</pubDate>
      
      <guid>/blog/this_website/</guid>
      <description>&lt;p&gt;A little spiel on how and why I made this website.&lt;/p&gt;
&lt;h1 id=&#34;&#34;&gt;A website! How?&lt;/h1&gt;
&lt;p&gt;With ease.&lt;/p&gt;
&lt;p&gt;I&amp;rsquo;ve made a personal website before actually. I crafted it out of raw html and css, no frameworks, or whatever, just as Tim Berners-Lee intended.&lt;/p&gt;
&lt;p&gt;$$ \frac{2}{3} $$&lt;/p&gt;
&lt;p&gt;This time around I wanted things to&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Just be plain easier to code, so I actually &lt;em&gt;use&lt;/em&gt; the damn thing&lt;/li&gt;
&lt;li&gt;Feel a bit more&amp;hellip; put together&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;So I made this website using Hugo, the docs for which leave a &lt;em&gt;little&lt;/em&gt; to be desired in terms of a tutorial - it&amp;rsquo;s sort of like &amp;ldquo;so here&amp;rsquo;s how to install themes and make content - right! That&amp;rsquo;s all! Have fun wandering round the other doc pages slowly piecing everything else together!&amp;rdquo;. Whatever. I got it working easily enough.&lt;/p&gt;
&lt;p&gt;&lt;del&gt;Future me can pick this up, I might edit the CSS, which would certainly change the content of this article&lt;/del&gt;&lt;/p&gt;
&lt;h1 id=&#34;&#34;&gt;A website &amp;#x1f440;!? Why?&lt;/h1&gt;
&lt;p&gt;I needed a place to document my projects. I plan to make YouTube videos on them too, but videos are effort. Writing little posts is much easier (plus it acts as a sort of draft for the video script - two turds with one bone!).&lt;/p&gt;
&lt;p&gt;I also wanted a place to share some writings. Mini-essays of sorts. I realised I should write more - get the thoughts out there - &lt;em&gt;distill things&lt;/em&gt;. I&amp;rsquo;ve got a post coming up about teaching fractions, decimals, and division of them to children, motivated by my struggle trying to teach said topics to my little cousin.&lt;/p&gt;
&lt;p&gt;And finally, like the home page &lt;del&gt;says&lt;/del&gt; (will say):&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&amp;ldquo;I ask, &amp;lsquo;cause I&amp;rsquo;m not sure, do anybody make real shit anymore?&amp;rdquo; - K. West, &lt;em&gt;Stronger&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Social media just ain&amp;rsquo;t got the &lt;strong&gt;vibe&lt;/strong&gt;. Same profile layout, same black background (because you&amp;rsquo;re not &lt;em&gt;seriously&lt;/em&gt; using Instagram in light mode are you?) - it&amp;rsquo;s a damn shame. That&amp;rsquo;s part of the reason I whacked this thing on &lt;a href=&#34;https://neocities.org/browse&#34;&gt;Neocities&lt;/a&gt; (also because it&amp;rsquo;s free): you see some real creativity from some real deranged people on there - &lt;em&gt;just as Tim Berners-Lee intended&lt;/em&gt;. Webpages should contain knowledge and vibes, not slop.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
